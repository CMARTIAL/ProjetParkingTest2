@using ProjetParkingTest2.Models
@{
    ViewBag.Title = "GoogleMaps";
}
@*@model EvenementViewModel*@
@model EvenementParkingViewModel
@*@model IEnumerable<EvenementViewModel>*@
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Google Map Api v3</title>
    <link rel="stylesheet" href="~/Content/jquery-ui-1.8.12.custom.css" type="text/css" />
</head>
<style type="text/css">

    #container {
        position: relative;
        width: 990px;
        margin: auto;
    }

        #container #map {
            width: 500px;
            height: 500px;
            margin: auto;
        }
</style>
<body>
    <div id="container">
        <h1>Calcul d'itinéraire Google Maps Api V3</h1>
        <div id="destinationForm">
            @*<form action="" method="get" name="direction" id="direction">
                    <label>Point de départ :</label>
                    <input type="text" name="origin" id="origin">
                    <label>Destination :</label>
                    <input type="text" name="destination" id="destination">
                    <input type="button" value="Calculer l'itinéraire" onclick="javascript:calculate()">
                </form>*@
            @*<form action="Home/Edit">

                    <label for="name">Veuillez saisir votre adresse :</label>
                    <input type="text" id="adressse_id" name="adresseConvive" placeholder="Veuillez saisir votre adresse" />
                    @Html.DropDownListFor(model => model.Id, new SelectList(EvenementViewModel.GetAll(), "Id", "Titre"))
                    <input type="submit" value="Submit" />
                </form>*@
        </div>
        <div id="panel">
        </div>

        <div id="map">
            <p>Veuillez patienter pendant le chargement de la carte...</p>
        </div>
    </div>


    <!-- Include Javascript -->
    <script type="text/javascript" src="~/Scripts/jquery.min.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery-ui-1.8.12.custom.min.js"></script>
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?key=AIzaSyCyoqbqJVd_MtZRT_0DmYmznxxJWRfMjQI&callback=initMap"></script>
    @*    <script type="text/javascript" src="~/Scripts/functionsGoogleMaps.js"></script>*@
    @*<script type="text/javascript">
            SetMarkers(Model);
        </script>*@

    <script type="text/javascript">

        var map;
        //var panel;
        //var initialize;
        //var calculate;
        //var direction;
        var geocoder = new google.maps.Geocoder();
        initialize = function () {

            var latLng = new google.maps.LatLng(48.114789, -1.677848); // Correspond au coordonnées de Rennes
            var myOptions = {
                zoom: 10, // Zoom par défaut
                center: latLng, // Coordonnées de départ de la carte de type latLng
                mapTypeId: google.maps.MapTypeId.TERRAIN, // Type de carte, différentes valeurs possible HYBRID, ROADMAP, SATELLITE, TERRAIN
                maxZoom: 20
            };

            map = new google.maps.Map(document.getElementById('map'), myOptions);
            //panel = document.getElementById('panel');

            //------
            var marker = new google.maps.Marker({
                position: latLng,
                map: map,
                title: "Lille"
                //icon     : "marker_lille.gif" // Chemin de l'image du marqueur pour surcharger celui par défaut
            });

            var contentMarker = [
                '<div id="containerTabs">',
                '<div id="tabs2">',
                '<h3>Pretium suscipit</h3><ul><li>Lorem</li><li>Ipsum</li><li>Dolor</li><li>Amectus</li></ul>',
                '</div>',
                '</div>'
            ].join('');
            /*
            google.maps.event.addListener(infoWindow, 'domready', function () { // infoWindow est biensûr notre info-bulle
                jQuery("#tabs2").tabs();
            });
            */
            var iconBase = 'https://maps.google.com/mapfiles/ms/icons/';
            var l2 = codeAddress(geocoder,map,'Nantes')// 'Model.Evenement.AdresseEvenement.ToString().Replace(" ","+")')
            var marker2 = new google.maps.Marker({
                position: l2,
                         map: map,
                         title: '@Model.Evenement.Titre',
                         //icon: 'https://maps.google.com/mapfiles/ms/icons/yellow-dot.png',
                icon: iconBase + 'yellow-dot.png'
            });
            var contentMarker2 = "contentMarker2"

            var infoWindow2 = new google.maps.InfoWindow({
            });

            google.maps.event.addListener(marker, 'click', function () {
                infoWindow2.setContent(contentMarker);
                infoWindow2.setPosition(l2)
                infoWindow2.open(map, marker);
            });
            google.maps.event.addListener(marker2, 'click', function () {
                infoWindow2.setContent(contentMarker2);
                infoWindow2.open(map, marker2);
            });
            /*
            google.maps.event.addListener(infoWindow, 'domready', function () { // infoWindow est biensûr notre info-bulle
                jQuery("#tabs2").tabs();
        */
            //-----
        };


        calculate = function () {
            origin = document.getElementById('origin').value; // Le point départ
            destination = document.getElementById('destination').value; // Le point d'arrivé

            if (origin && destination) {
                var request = {
                    origin: origin,
                    destination: destination,
                    travelMode: google.maps.DirectionsTravelMode.DRIVING // Mode de conduite
                }
                var directionsService = new google.maps.DirectionsService(); // Service de calcul d'itinéraire
                directionsService.route(request, function (response, status) { // Envoie de la requête pour calculer le parcours
                    if (status == google.maps.DirectionsStatus.OK) {
                        direction.setDirections(response); // Trace l'itinéraire sur la carte et les différentes étapes du parcours
                    }
                });
            }
        };

        function SetMarkers(a) {

            //marker de l'evenement
                        var markerEvenement = new google.maps.Marker({
                         position: codeAddress(geocoder,map,'@Model.Evenement.AdresseEvenement.ToString().Replace(" ","")'), //new google.maps.LatLng((item.AdresseEvenement.lng.ToString().Replace(',', '.')), (item.AdresseEvenement.lng.ToString().Replace(',', '.'))),
                         map: map,
                         title: '@Model.Evenement.Titre',
                         icon: 'https://maps.google.com/mapfiles/ms/icons/yellow-dot.png',
            });

            var contentMarkerEvenement = [
                '<div id="containerTabs">',
                '<div id="tabs">',
                '<div id="tab-1">',
                '<h3>Id : @Model.Evenement.AdresseEvenement.ToString()</h3>',
                '</div>',
                '</div>',
                '</div>'
            ].join('');
            

            google.maps.event.addListener(markerEvenement, 'click', function () {
                infoWindow2.setContent(contentMarkerEvenement);
                infoWindow2.open(map, markerEvenement);
            });


                        //marker du convive
            var markerConvive = new google.maps.Marker({
                  position: codeAddress(geocoder,map,'@Model.AdresseConvive'), //new google.maps.LatLng((item.AdresseEvenement.lng.ToString().Replace(',', '.')), (item.AdresseEvenement.lng.ToString().Replace(',', '.'))),
                  map: map,
                  title: '@Model.AdresseConvive',
                  icon: 'https://maps.google.com/mapfiles/ms/icons/green-dot.png',
            });
            
            var contentMarkerConvive = [
                '<div id="containerTabs">',
                '<div id="tabs">',
                '<div id="tab-1">',
                '<h3>Id : @Model.Evenement.AdresseEvenement.ToString()</h3>',
                '</div>',
                '</div>',
                '</div>'
            ].join('');
            
            google.maps.event.addListener(markerConvive, 'click', function () {
                infoWindow2.setContent(contentMarkerConvive);
                infoWindow2.open(map, markerConvive);
            });

            @foreach (var item in Model.Parkings)
                {
        <text>

            var markerParking = new google.maps.Marker({
                position: codeAddress(geocoder,map,'@(item.AdressePark.ToString().Replace(" ", "+"))'), //new google.maps.LatLng((item.AdresseEvenement.lng.ToString().Replace(',', '.')), (item.AdresseEvenement.lng.ToString().Replace(',', '.'))),
                map: map,
                title: '@(item.AdressePark.ToString())',
                icon: 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png',
                });

             var contentMarkerParking = [
                '<div id="containerTabs">',
                '<div id="tabs">',
                '<div id="tab-1">',
                '<h3>Id : @Model.Evenement.AdresseEvenement.ToString()</h3>',
                '</div>',
                '</div>',
                '</div>'
            ].join('');
            
            google.maps.event.addListener(markerParking, 'click', function () {
                infoWindow2.setContent(contentMarkerParking);
                infoWindow2.open(map, markerParking);
            });

            direction = new google.maps.DirectionsRenderer({
                map: map,
                panel: panel // Dom element pour afficher les instructions d'itinéraire
            });

            markerParking.setMap(map);
            </text>
            }
        };

        function codeAddress(geocoder, map,address) {
            geocoder.geocode({ 'address': address }, function (results, status) {
                if (status === 'OK') {
                    /*
                    map.setCenter(results[0].geometry.location);
                    var marker = new google.maps.Marker({
                        map: map,
                        position: results[0].geometry.location
                    });
                        */
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }
        initialize();
        SetMarkers();
    </script>

</body>
