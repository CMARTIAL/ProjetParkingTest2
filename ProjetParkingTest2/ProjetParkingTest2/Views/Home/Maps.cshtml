@using ProjetParkingTest2.Models
@{
    ViewBag.Title = "GoogleMaps";
}
@*@model EvenementViewModel*@
@model EvenementParkingViewModel
@*@model IEnumerable<EvenementViewModel>*@
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Google Map Api v3</title>
    <link rel="stylesheet" href="~/Content/jquery-ui-1.8.12.custom.css" type="text/css" />
</head>
<style type="text/css">

    #container {
        position: relative;
        width: 990px;
        margin: auto;
    }

        #container #map {
            width: 500px;
            height: 500px;
            margin: auto;
        }
</style>
<body>
    <div id="container">
        <h1>Calcul d'itinéraire Google Maps Api V3</h1>
        <div id="destinationForm">

        </div>
        <div id="content" class="">
            <div id="map">
                <p>Veuillez patienter pendant le chargement de la carte...</p>
            </div>
            <div id="panel"></div>
        </div>
    </div>


    <!-- Include Javascript -->
    <script type="text/javascript" src="~/Scripts/jquery.min.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery-ui-1.8.12.custom.min.js"></script>
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?key=AIzaSyCyoqbqJVd_MtZRT_0DmYmznxxJWRfMjQI"></script>
    <script type="text/javascript">

        var map;

        var infoWindow2 = new google.maps.InfoWindow({ maxWidth: 220 });
        var geocoder = new google.maps.Geocoder();
        var iconBase = "https://maps.google.com/mapfiles/ms/icons/"
        var adresse;
        var adresseConvive = '@Model.AdresseConvive';

        var panel;
        var initialize;
        var calculate;
        var direction;

        initialize = function () {

            var latLng = new google.maps.LatLng(48.114789, -1.677848); // Correspond au coordonnées de Rennes

            var myOptions = {
                zoom: 5, // Zoom par défaut
                center: latLng, // Coordonnées de départ de la carte de type latLng
                mapTypeId: google.maps.MapTypeId.TERRAIN, // Type de carte, différentes valeurs possible HYBRID, ROADMAP, SATELLITE, TERRAIN
                maxZoom: 30
            };

            map = new google.maps.Map(document.getElementById('map'), myOptions);
            panel = document.getElementById("panel");

            //Mise en place de la direction
            direction = new google.maps.DirectionsRenderer({
                preserveViewport: true,
                map: map,
                panel: panel
            });

            //Marqueur de l'évènement
            adresse = '@Model.Evenement.AdresseEvenement.ToString()';
            codeAddress(geocoder, map, adresse, adresse, iconBase + 'purple-dot.png');

            //marqueur du convive
            adresse = '@Model.AdresseConvive';
            codeAddress(geocoder, map, adresse, adresse, iconBase + 'blue-dot.png');

            @foreach (var item in Model.Parkings)
                {
                 <text>
                adresse = '@item.AdressePark';

                var variableNBPlaceLibre = '@item.NBPlaceLibre';
                var variableNBPlaceTotal = '@item.NBPlaceTotal';
                var variableTarif = '@item.Tarif';
                var variableHoraire = '@item.Horraire';
                var variableTitre = '@item.Titre';

                var contentMarkerParking = [
                    '<div id="containerTabs">',
                    '<div id="tabs">',
                    '<h3>Parking ' + variableTitre +'</h3>',
                    '<ul>',
                    '<li>Places libres</li>',
                    '<p>Il reste ' + variableNBPlaceLibre + ' sur ' + variableNBPlaceTotal +' places.</p>',
                    '<li>Tarifs</li>',
                    '<p>' + variableTarif +'</p>',
                    '<li>Horraires</li>',
                    '<p>' + variableHoraire +'</p>',
                    '</ul>',
                    '</div>',
                    '</div>'
                ].join('');

                codeAddressParking(geocoder, map, adresse, contentMarkerParking, iconBase + 'yellow-dot.png');
                </text>
            }


        };

        function codeAddress(geocoder, map, address, libelle, iconColor) {
            geocoder.geocode({ 'address': address }, function (results, status) {
                if (status === 'OK') {

                    //Création du marqueur
                    var marker = new google.maps.Marker({
                        map: map,
                        position: results[0].geometry.location,
                        icon: iconColor
                    });

                    //Ajout d'un texte pour l'infoBulle du marqueur
                    var contentMarkerEvenement = libelle;

                    //Attribution de l'infoBulle au marqueur
                    google.maps.event.addListener(marker, 'click', function () {
                        infoWindow2.setContent(contentMarkerEvenement);
                        infoWindow2.open(map, marker);
                        calculate(marker);
                    });

                } else {
                    alert('Geocode was not successful for the following reason: ' + status +" || Adresse > "+ address);
                }
            });
        }

        function codeAddressParking(geocoder, map, address, contentMarkerParking, iconColor) {
            geocoder.geocode({ 'address': address }, function (results, status) {
                if (status === 'OK') {

                    //Recentre la carte sur le dernier point
                    map.setCenter(results[0].geometry.location);

                    //Création du marqueur
                    var marker = new google.maps.Marker({
                        map: map,
                        position: results[0].geometry.location,
                        icon: iconColor
                    });

                    //Attribution de l'infoBulle au marqueur
                    google.maps.event.addListener(marker, 'click', function () {
                        infoWindow2.setContent(contentMarkerParking);
                        infoWindow2.open(map, marker);
                        calculate(marker);
                    });

                } else {
                    alert('Geocode was not successful for the following reason: ' + status + " || Adresse > " + address);
                }
            });
        }


        calculate = function (de) {
            origin = adresseConvive; // Le point départ
            var lat = de.getPosition().lat();
            var lng = de.getPosition().lng();
            destination = new google.maps.LatLng(lat, lng);; // Le point d'arrivé

            if (origin && destination) {
                var request = {
                    origin: origin,
                    destination: destination,
                    travelMode: google.maps.DirectionsTravelMode.DRIVING // Type de transport
                }
                var directionsService = new google.maps.DirectionsService(); // Service de calcul d'itinéraire
                directionsService.route(request, function (response, status) { // Envoie de la requête pour calculer le parcours
                    if (status == google.maps.DirectionsStatus.OK) {

                        direction.setDirections(response); // Trace l'itinéraire sur la carte et les différentes étapes du parcours
                    }
                });
            }
        };

        initialize();



    </script>

</body>
